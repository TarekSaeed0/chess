#ifndef CHESS_SQUARE_H_INCLUDED
#define CHESS_SQUARE_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

#include <chess/color.h>
#include <chess/file.h>
#include <chess/macros.h>
#include <chess/rank.h>

#if !defined(__STDC_VERSION__) || __STDC_VERSION__ < 202311L
	#include <stdbool.h>
#endif
#include <stddef.h>
#include <stdint.h>

typedef struct ChessPosition ChessPosition;

CHESS_ENUM(uint8_t, ChessSquare) {
	CHESS_SQUARE_A1   = CHESS_FILE_A | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_B1   = CHESS_FILE_B | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_C1   = CHESS_FILE_C | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_D1   = CHESS_FILE_D | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_E1   = CHESS_FILE_E | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_F1   = CHESS_FILE_F | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_G1   = CHESS_FILE_G | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_H1   = CHESS_FILE_H | CHESS_RANK_1 << 4U,

	CHESS_SQUARE_A2   = CHESS_FILE_A | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_B2   = CHESS_FILE_B | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_C2   = CHESS_FILE_C | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_D2   = CHESS_FILE_D | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_E2   = CHESS_FILE_E | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_F2   = CHESS_FILE_F | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_G2   = CHESS_FILE_G | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_H2   = CHESS_FILE_H | CHESS_RANK_2 << 4U,

	CHESS_SQUARE_A3   = CHESS_FILE_A | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_B3   = CHESS_FILE_B | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_C3   = CHESS_FILE_C | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_D3   = CHESS_FILE_D | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_E3   = CHESS_FILE_E | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_F3   = CHESS_FILE_F | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_G3   = CHESS_FILE_G | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_H3   = CHESS_FILE_H | CHESS_RANK_3 << 4U,

	CHESS_SQUARE_A4   = CHESS_FILE_A | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_B4   = CHESS_FILE_B | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_C4   = CHESS_FILE_C | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_D4   = CHESS_FILE_D | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_E4   = CHESS_FILE_E | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_F4   = CHESS_FILE_F | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_G4   = CHESS_FILE_G | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_H4   = CHESS_FILE_H | CHESS_RANK_4 << 4U,

	CHESS_SQUARE_A5   = CHESS_FILE_A | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_B5   = CHESS_FILE_B | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_C5   = CHESS_FILE_C | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_D5   = CHESS_FILE_D | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_E5   = CHESS_FILE_E | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_F5   = CHESS_FILE_F | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_G5   = CHESS_FILE_G | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_H5   = CHESS_FILE_H | CHESS_RANK_5 << 4U,

	CHESS_SQUARE_A6   = CHESS_FILE_A | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_B6   = CHESS_FILE_B | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_C6   = CHESS_FILE_C | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_D6   = CHESS_FILE_D | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_E6   = CHESS_FILE_E | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_F6   = CHESS_FILE_F | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_G6   = CHESS_FILE_G | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_H6   = CHESS_FILE_H | CHESS_RANK_6 << 4U,

	CHESS_SQUARE_A7   = CHESS_FILE_A | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_B7   = CHESS_FILE_B | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_C7   = CHESS_FILE_C | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_D7   = CHESS_FILE_D | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_E7   = CHESS_FILE_E | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_F7   = CHESS_FILE_F | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_G7   = CHESS_FILE_G | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_H7   = CHESS_FILE_H | CHESS_RANK_7 << 4U,

	CHESS_SQUARE_A8   = CHESS_FILE_A | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_B8   = CHESS_FILE_B | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_C8   = CHESS_FILE_C | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_D8   = CHESS_FILE_D | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_E8   = CHESS_FILE_E | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_F8   = CHESS_FILE_F | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_G8   = CHESS_FILE_G | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_H8   = CHESS_FILE_H | CHESS_RANK_8 << 4U,

	CHESS_SQUARE_NONE = CHESS_FILE_NONE | CHESS_RANK_NONE << 4U,
};

void chess_square_debug(ChessSquare square);
bool chess_square_is_valid(ChessSquare square);
ChessSquare chess_square_new(ChessFile file, ChessRank rank);
ChessFile chess_square_file(ChessSquare square);
ChessRank chess_square_rank(ChessSquare square);
ChessColor chess_square_color(ChessSquare square);
size_t chess_square_from_algebraic(ChessSquare *square, const char *string);
size_t chess_square_to_algebraic(ChessSquare square, char *string, size_t string_size);
bool chess_square_is_attacked(const ChessPosition *position, ChessSquare square, ChessColor color);

#ifdef __cplusplus
}
#endif

#endif // CHESS_SQUARE_H_INCLUDED
