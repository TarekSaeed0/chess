#ifndef CHESS_TYPES_H_INCLUDED
#define CHESS_TYPES_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

#include <chess/macros.h>

#include <stddef.h>
#include <stdint.h>
#if !defined(__STDC_VERSION__) || __STDC_VERSION__ < 202311L
	#include <stdbool.h>
#endif

CHESS_DEFINE_INTEGRAL_CONSTANT(size_t, CHESS_MOVES_MAXIMUM_COUNT, 256);

CHESS_ENUM(uint8_t, ChessColor) {
	CHESS_COLOR_NONE  = 0U,

	CHESS_COLOR_WHITE = 1U,
	CHESS_COLOR_BLACK = 2U,
};

CHESS_ENUM(uint8_t, ChessPieceType) {
	CHESS_PIECE_TYPE_NONE   = 0U,

	CHESS_PIECE_TYPE_PAWN   = 1U,
	CHESS_PIECE_TYPE_KNIGHT = 2U,
	CHESS_PIECE_TYPE_BISHOP = 3U,
	CHESS_PIECE_TYPE_ROOK   = 4U,
	CHESS_PIECE_TYPE_QUEEN  = 5U,
	CHESS_PIECE_TYPE_KING   = 6U,
};

CHESS_ENUM(uint8_t, ChessPiece) {
	CHESS_PIECE_NONE         = CHESS_COLOR_NONE << 3U | CHESS_PIECE_TYPE_NONE,

	CHESS_PIECE_WHITE_PAWN   = CHESS_COLOR_WHITE << 3U | CHESS_PIECE_TYPE_PAWN,
	CHESS_PIECE_WHITE_KNIGHT = CHESS_COLOR_WHITE << 3U | CHESS_PIECE_TYPE_KNIGHT,
	CHESS_PIECE_WHITE_BISHOP = CHESS_COLOR_WHITE << 3U | CHESS_PIECE_TYPE_BISHOP,
	CHESS_PIECE_WHITE_ROOK   = CHESS_COLOR_WHITE << 3U | CHESS_PIECE_TYPE_ROOK,
	CHESS_PIECE_WHITE_QUEEN  = CHESS_COLOR_WHITE << 3U | CHESS_PIECE_TYPE_QUEEN,
	CHESS_PIECE_WHITE_KING   = CHESS_COLOR_WHITE << 3U | CHESS_PIECE_TYPE_KING,

	CHESS_PIECE_BLACK_PAWN   = CHESS_COLOR_BLACK << 3U | CHESS_PIECE_TYPE_PAWN,
	CHESS_PIECE_BLACK_KNIGHT = CHESS_COLOR_BLACK << 3U | CHESS_PIECE_TYPE_KNIGHT,
	CHESS_PIECE_BLACK_BISHOP = CHESS_COLOR_BLACK << 3U | CHESS_PIECE_TYPE_BISHOP,
	CHESS_PIECE_BLACK_ROOK   = CHESS_COLOR_BLACK << 3U | CHESS_PIECE_TYPE_ROOK,
	CHESS_PIECE_BLACK_QUEEN  = CHESS_COLOR_BLACK << 3U | CHESS_PIECE_TYPE_QUEEN,
	CHESS_PIECE_BLACK_KING   = CHESS_COLOR_BLACK << 3U | CHESS_PIECE_TYPE_KING,
};

CHESS_ENUM(uint8_t, ChessFile) {
	CHESS_FILE_NONE = 0U,

	CHESS_FILE_A    = 8U,
	CHESS_FILE_B    = 9U,
	CHESS_FILE_C    = 10U,
	CHESS_FILE_D    = 11U,
	CHESS_FILE_E    = 12U,
	CHESS_FILE_F    = 13U,
	CHESS_FILE_G    = 14U,
	CHESS_FILE_H    = 15U,
};

CHESS_ENUM(uint8_t, ChessRank) {
	CHESS_RANK_NONE = 0U,

	CHESS_RANK_1    = 8U,
	CHESS_RANK_2    = 9U,
	CHESS_RANK_3    = 10U,
	CHESS_RANK_4    = 11U,
	CHESS_RANK_5    = 12U,
	CHESS_RANK_6    = 13U,
	CHESS_RANK_7    = 14U,
	CHESS_RANK_8    = 15U,
};

CHESS_ENUM(uint8_t, ChessSquare) {
	CHESS_SQUARE_NONE = CHESS_FILE_NONE | CHESS_RANK_NONE << 4U,

	CHESS_SQUARE_A1   = CHESS_FILE_A | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_B1   = CHESS_FILE_B | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_C1   = CHESS_FILE_C | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_D1   = CHESS_FILE_D | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_E1   = CHESS_FILE_E | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_F1   = CHESS_FILE_F | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_G1   = CHESS_FILE_G | CHESS_RANK_1 << 4U,
	CHESS_SQUARE_H1   = CHESS_FILE_H | CHESS_RANK_1 << 4U,

	CHESS_SQUARE_A2   = CHESS_FILE_A | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_B2   = CHESS_FILE_B | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_C2   = CHESS_FILE_C | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_D2   = CHESS_FILE_D | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_E2   = CHESS_FILE_E | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_F2   = CHESS_FILE_F | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_G2   = CHESS_FILE_G | CHESS_RANK_2 << 4U,
	CHESS_SQUARE_H2   = CHESS_FILE_H | CHESS_RANK_2 << 4U,

	CHESS_SQUARE_A3   = CHESS_FILE_A | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_B3   = CHESS_FILE_B | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_C3   = CHESS_FILE_C | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_D3   = CHESS_FILE_D | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_E3   = CHESS_FILE_E | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_F3   = CHESS_FILE_F | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_G3   = CHESS_FILE_G | CHESS_RANK_3 << 4U,
	CHESS_SQUARE_H3   = CHESS_FILE_H | CHESS_RANK_3 << 4U,

	CHESS_SQUARE_A4   = CHESS_FILE_A | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_B4   = CHESS_FILE_B | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_C4   = CHESS_FILE_C | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_D4   = CHESS_FILE_D | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_E4   = CHESS_FILE_E | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_F4   = CHESS_FILE_F | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_G4   = CHESS_FILE_G | CHESS_RANK_4 << 4U,
	CHESS_SQUARE_H4   = CHESS_FILE_H | CHESS_RANK_4 << 4U,

	CHESS_SQUARE_A5   = CHESS_FILE_A | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_B5   = CHESS_FILE_B | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_C5   = CHESS_FILE_C | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_D5   = CHESS_FILE_D | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_E5   = CHESS_FILE_E | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_F5   = CHESS_FILE_F | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_G5   = CHESS_FILE_G | CHESS_RANK_5 << 4U,
	CHESS_SQUARE_H5   = CHESS_FILE_H | CHESS_RANK_5 << 4U,

	CHESS_SQUARE_A6   = CHESS_FILE_A | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_B6   = CHESS_FILE_B | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_C6   = CHESS_FILE_C | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_D6   = CHESS_FILE_D | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_E6   = CHESS_FILE_E | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_F6   = CHESS_FILE_F | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_G6   = CHESS_FILE_G | CHESS_RANK_6 << 4U,
	CHESS_SQUARE_H6   = CHESS_FILE_H | CHESS_RANK_6 << 4U,

	CHESS_SQUARE_A7   = CHESS_FILE_A | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_B7   = CHESS_FILE_B | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_C7   = CHESS_FILE_C | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_D7   = CHESS_FILE_D | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_E7   = CHESS_FILE_E | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_F7   = CHESS_FILE_F | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_G7   = CHESS_FILE_G | CHESS_RANK_7 << 4U,
	CHESS_SQUARE_H7   = CHESS_FILE_H | CHESS_RANK_7 << 4U,

	CHESS_SQUARE_A8   = CHESS_FILE_A | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_B8   = CHESS_FILE_B | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_C8   = CHESS_FILE_C | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_D8   = CHESS_FILE_D | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_E8   = CHESS_FILE_E | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_F8   = CHESS_FILE_F | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_G8   = CHESS_FILE_G | CHESS_RANK_8 << 4U,
	CHESS_SQUARE_H8   = CHESS_FILE_H | CHESS_RANK_8 << 4U,
};

CHESS_ENUM(uint8_t, ChessCastlingRights) {
	CHESS_CASTLING_RIGHTS_NONE            = 0U,

	CHESS_CASTLING_RIGHTS_WHITE_KINGSIDE  = 1U << 0U,
	CHESS_CASTLING_RIGHTS_WHITE_QUEENSIDE = 1U << 1U,
	CHESS_CASTLING_RIGHTS_BLACK_KINGSIDE  = 1U << 2U,
	CHESS_CASTLING_RIGHTS_BLACK_QUEENSIDE = 1U << 3U,

	CHESS_CASTLING_RIGHTS_WHITE           = CHESS_CASTLING_RIGHTS_WHITE_KINGSIDE | CHESS_CASTLING_RIGHTS_WHITE_QUEENSIDE,
	CHESS_CASTLING_RIGHTS_BLACK           = CHESS_CASTLING_RIGHTS_BLACK_KINGSIDE | CHESS_CASTLING_RIGHTS_BLACK_QUEENSIDE,

	CHESS_CASTLING_RIGHTS_ALL             = CHESS_CASTLING_RIGHTS_WHITE | CHESS_CASTLING_RIGHTS_BLACK,
};

typedef struct ChessPositionCounterEntry {
	uint64_t key;
	unsigned int value;
} ChessPositionCounterEntry;

typedef struct ChessPositionCounter {
	ChessPositionCounterEntry *entries;
	size_t size;
	size_t count;
} ChessPositionCounter;

typedef struct ChessPosition {
	ChessPiece board[256];
	ChessColor side_to_move;
	ChessCastlingRights castling_rights;
	ChessSquare en_passant_square;
	unsigned int half_move_clock;
	unsigned int full_move_number;
	ChessSquare king_squares[3];
	ChessPositionCounter position_counter;
} ChessPosition;

typedef struct ChessMove {
	ChessSquare from;
	ChessSquare to;
	ChessPieceType promotion_type;
} ChessMove;

typedef struct ChessMoves {
	struct ChessMove moves[CHESS_MOVES_MAXIMUM_COUNT];
	size_t count;
} ChessMoves;

#ifdef __cplusplus
}
#endif

#endif // CHESS_TYPES_H_INCLUDED
